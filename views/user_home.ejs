<html>
<head>
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>Cryptofolio </title>
  <link rel="stylesheet" href="/css/user_home.css">
  <!-- CSS only -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi" crossorigin="anonymous">
  <script src="https://d3js.org/d3.v4.js"></script>
  <script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>
</head>

<body>
<div class="header">
  <nav>
    <div class="logo">
      <img src="/img/logo.png">
      <span>Cryptofolio</span>
    </div>
    <ul>
      <li><a href="/">Home</a></li>
      <li><a href="/transactions">Transactions</a></li>
      <li><a href="/maps">Local Crypto Exchanges</a></li>
      <li><a href="/contact">Contact </a> </li>
      <% if(locals.isAdmin) { %>
        <li><a href="/admin">Admin Dashboard</a></li>
      <% } %>
      <li><a href="/logout">Logout</a></li>
    </ul>
  </nav>

  <div class="content">
    <div class="row">
      <div class="col-8">
        <h1 class="slide-left">Welcome back<br> &nbsp <%= user.name %> </h1>
        <br>
        <h2 class="slide-left"> Total Portifolio Worth: <%= totalPortifolioWorth.totalPortifolioWorth %> $ </h2>
        <br>
      </div>
      <div class="col-4">
        <div id="my_dataviz"></div>
        <script>
          // set the dimensions and margins of the graph
          var width = 500
              height = 500
              margin = 40
          
          // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.
          var radius = Math.min(width, height) / 2 - margin
          
          // append the svg object to the div called 'my_dataviz'
          var svg = d3.select("#my_dataviz")
            .append("svg")
              .attr("width", width)
              .attr("height", height)
            .append("g")
              .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
          
          // Create dummy data
          var data = JSON.parse('<%-balance%>');
          var keys = JSON.parse('<%-keys%>');
          console.log(data)
          // set the color scale
          var color = d3.scaleOrdinal()
            .domain(keys)
            .range(d3.schemeDark2);
          
          // Compute the position of each group on the pie:
          var pie = d3.pie()
            .sort(null) // Do not sort group by size
            .value(function(d) {return d.value; })
          var data_ready = pie(d3.entries(data))
          
          // The arc generator
          var arc = d3.arc()
            .innerRadius(radius * 0.5)         // This is the size of the donut hole
            .outerRadius(radius * 0.8)
          
          // Another arc that won't be drawn. Just for labels positioning
          var outerArc = d3.arc()
            .innerRadius(radius * 0.9)
            .outerRadius(radius * 0.9)
          
          // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
          svg
            .selectAll('allSlices')
            .data(data_ready)
            .enter()
            .append('path')
            .attr('d', arc)
            .attr('fill', function(d){ return(color(d.data.key)) })
            .attr("stroke", "white")
            .style("stroke-width", "2px")
            .style("opacity", 0.7)
          
          // Add the polylines between chart and labels:
          svg
            .selectAll('allPolylines')
            .data(data_ready)
            .enter()
            .append('polyline')
              .attr("stroke", "black")
              .style("fill", "none")
              .attr("stroke-width", 1)
              .attr('points', function(d) {
                var posA = arc.centroid(d) // line insertion in the slice
                var posB = outerArc.centroid(d) // line break: we use the other arc generator that has been built only for that
                var posC = outerArc.centroid(d); // Label position = almost the same as posB
                var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2 // we need the angle to see if the X position will be at the extreme right or extreme left
                posC[0] = radius * 0.95 * (midangle < Math.PI ? 1 : -1); // multiply by 1 or -1 to put it on the right or on the left
                return [posA, posB, posC]
              })
          
          // Add the polylines between chart and labels:
          svg
            .selectAll('allLabels')
            .data(data_ready)
            .enter()
            .append('text')
              .text( function(d) { console.log(d.data.key) ; return d.data.key } )
              .attr('transform', function(d) {
                  var pos = outerArc.centroid(d);
                  var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2
                  pos[0] = radius * 0.99 * (midangle < Math.PI ? 1 : -1);
                  return 'translate(' + pos + ')';
              })
              .style('text-anchor', function(d) {
                  var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2
                  return (midangle < Math.PI ? 'start' : 'end')
              })
      </script>
      </div>
    </div>
    <!-- form handling -->
    <form action="/" method="POST">
      <table class="table">
        <thead class="thead-dark">
        <tr>
          <th>Symbol</th>
          <th>Name</th>
          <th>Amount</th>
        </tr>
        </thead>
        <tbody>
        <%- include('include/_assets') %>
        </tbody>
      </table>
    </form>
  </div>
</div>
</body>
</html>